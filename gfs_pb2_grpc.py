# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gfs_pb2 as gfs__pb2


class MasterServerToClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFiles = channel.unary_unary(
                '/gfs.MasterServerToClient/ListFiles',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.CreateFile = channel.unary_unary(
                '/gfs.MasterServerToClient/CreateFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.AppendFile = channel.unary_unary(
                '/gfs.MasterServerToClient/AppendFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.CreateChunk = channel.unary_unary(
                '/gfs.MasterServerToClient/CreateChunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.ReadFile = channel.unary_unary(
                '/gfs.MasterServerToClient/ReadFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.WriteFile = channel.unary_unary(
                '/gfs.MasterServerToClient/WriteFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )


class MasterServerToClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServerToClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'CreateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'AppendFile': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'CreateChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateChunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'ReadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'WriteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gfs.MasterServerToClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterServerToClient(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.MasterServerToClient/ListFiles',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.MasterServerToClient/CreateFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppendFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.MasterServerToClient/AppendFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.MasterServerToClient/CreateChunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.MasterServerToClient/ReadFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.MasterServerToClient/WriteFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ChunkServerToClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/gfs.ChunkServerToClient/Create',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.GetChunkSpace = channel.unary_unary(
                '/gfs.ChunkServerToClient/GetChunkSpace',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.Append = channel.unary_unary(
                '/gfs.ChunkServerToClient/Append',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.Read = channel.unary_unary(
                '/gfs.ChunkServerToClient/Read',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.AddData = channel.unary_unary(
                '/gfs.ChunkServerToClient/AddData',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.Write = channel.unary_unary(
                '/gfs.ChunkServerToClient/Write',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )


class ChunkServerToClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkSpace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Append(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChunkServerToClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'GetChunkSpace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChunkSpace,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'Append': grpc.unary_unary_rpc_method_handler(
                    servicer.Append,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'AddData': grpc.unary_unary_rpc_method_handler(
                    servicer.AddData,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gfs.ChunkServerToClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChunkServerToClient(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServerToClient/Create',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkSpace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServerToClient/GetChunkSpace',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Append(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServerToClient/Append',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServerToClient/Read',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServerToClient/AddData',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServerToClient/Write',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HealthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/gfs.Health/Check',
                request_serializer=gfs__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=gfs__pb2.HealthCheckResponse.FromString,
                )


class HealthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=gfs__pb2.HealthCheckRequest.FromString,
                    response_serializer=gfs__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gfs.Health', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Health(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Health/Check',
            gfs__pb2.HealthCheckRequest.SerializeToString,
            gfs__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PrimaryToClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Commit = channel.unary_unary(
                '/gfs.PrimaryToClient/Commit',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )


class PrimaryToClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrimaryToClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gfs.PrimaryToClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrimaryToClient(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.PrimaryToClient/Commit',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
